// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: kuscia/proto/api/v1alpha1/kusciaapi/model.proto

package kusciaapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelService_UploadModel_FullMethodName = "/kuscia.proto.api.v1alpha1.kusciaapi.ModelService/UploadModel"
)

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	UploadModel(ctx context.Context, opts ...grpc.CallOption) (ModelService_UploadModelClient, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) UploadModel(ctx context.Context, opts ...grpc.CallOption) (ModelService_UploadModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[0], ModelService_UploadModel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServiceUploadModelClient{stream}
	return x, nil
}

type ModelService_UploadModelClient interface {
	Send(*UploadModelRequest) error
	CloseAndRecv() (*UploadModelResponse, error)
	grpc.ClientStream
}

type modelServiceUploadModelClient struct {
	grpc.ClientStream
}

func (x *modelServiceUploadModelClient) Send(m *UploadModelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelServiceUploadModelClient) CloseAndRecv() (*UploadModelResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadModelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	UploadModel(ModelService_UploadModelServer) error
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) UploadModel(ModelService_UploadModelServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadModel not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_UploadModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServiceServer).UploadModel(&modelServiceUploadModelServer{stream})
}

type ModelService_UploadModelServer interface {
	SendAndClose(*UploadModelResponse) error
	Recv() (*UploadModelRequest, error)
	grpc.ServerStream
}

type modelServiceUploadModelServer struct {
	grpc.ServerStream
}

func (x *modelServiceUploadModelServer) SendAndClose(m *UploadModelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelServiceUploadModelServer) Recv() (*UploadModelRequest, error) {
	m := new(UploadModelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.kusciaapi.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadModel",
			Handler:       _ModelService_UploadModel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kuscia/proto/api/v1alpha1/kusciaapi/model.proto",
}
